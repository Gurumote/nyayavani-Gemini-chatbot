# -*- coding: utf-8 -*-
"""chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zKYw3K1yJAfEsuqlD1_vZPCZjVcepTAH
"""

!pip install streamlit pyngrok google-generativeai

app_code = '''
import streamlit as st
import google.generativeai as genai

# Configure API key
genai.configure(api_key="AIzaSyBa_-c9LJZwSe0DR0JuL8q9dokUnnJ_KSc")

# Load Gemini-Pro model
model = genai.GenerativeModel("gemini-2.5-flash-lite")
chat = model.start_chat(history=[])

def get_gemini_response(question):
    response = chat.send_message(question, stream=True)
    return response

# --- Streamlit UI ---
st.set_page_config(page_title="Nyayavani Chatbot", layout="centered")
st.title("üß† Nyayavani Chatbot")
st.markdown("üí¨ Ask me anything related to legal queries. Powered by **Gemini-Pro**.")

# Chat history initialization
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# Input form
with st.form("chat_form", clear_on_submit=True):
    user_input = st.text_input("Your Question", placeholder="Type your legal question here...")
    submit = st.form_submit_button("üß† Ask")

# If user submits a question
if submit and user_input:
    st.session_state.chat_history.append(("You", user_input))
    response = get_gemini_response(user_input)

    # Show streamed response
    bot_response = ""
    with st.spinner("Thinking..."):
        for chunk in response:
            bot_response += chunk.text
        st.session_state.chat_history.append(("Bot", bot_response))

# Display conversation history as a chat
st.divider()
st.subheader("üóÇÔ∏è Chat History")

for role, message in reversed(st.session_state.chat_history):
    if role == "You":
        st.markdown(f"<div style='background-color:#DCF8C6;padding:10px;border-radius:10px;margin-bottom:10px'><b>{role}:</b> {message}</div>", unsafe_allow_html=True)
    else:
        st.markdown(f"<div style='background-color:#F1F0F0;padding:10px;border-radius:10px;margin-bottom:10px'><b>{role}:</b> {message}</div>", unsafe_allow_html=True)
'''

# Save the code to a file
with open("app.py", "w") as f:
    f.write(app_code)

from pyngrok import conf

# Paste your token inside the quotes
conf.get_default().auth_token = "2vjWp7mrwDFmJe5Si5e1flemTzS_23RVwT4D23USNnJnienFD"

from pyngrok import ngrok
import os
import time

# Kill existing streamlit processes
os.system("pkill streamlit")

# Reconnect ngrok
public_url = ngrok.connect(8501)
print("Your Streamlit app is live at:", public_url)

# Launch Streamlit
!streamlit run app.py &> /dev/null &
time.sleep(5)

import google.generativeai as genai

# ‚úÖ Replace with your real API key
genai.configure(api_key="AIzaSyAX8Cg0DWRWIk7kJPfrfeIvIQcROusIVCw")

# Use correct model name
model = genai.GenerativeModel("gemini-2.5-flash-lite")

response = model.generate_content("how to train chatbot")
print(response.text)

for m in genai.list_models():
    print(m.name)





import streamlit as st
import google.generativeai as genai

genai.configure(api_key="AIzaSyBa_-c9LJZwSe0DR0JuL8q9dokUnnJ_KSc")

#Function to load Gemini Pro model and get response
model = genai.GenerativeModel("gemini-pro")
chat = model.start_chat(history=[])

def get_gemini_response(question):
  response=chat.send_message(question,stream=True)#stream is for displaying output
  return response #Output

#Initialize our streamlit app
st.set_page_config(page_title="Nyayavani Chatbot")
st.header("Powered by Gemini-Pro")

#Initializing Session State for chat history if it doesn't exist
 if 'chat_history' not in st.session_state:
  st.session_state['chat_history']=[]
input=st.text_input("Input:",key="input")
submit=st.button("Ask the question")

if submit and input:
  response=get_gemini_response(input)
  ## Add User Query and reponse to session chat history
  st.session_state['chat_history'].append("You",input)
  st.subheader("The reponse is")
  for chunk in response:
    st.write(chunk.text)
    st.session_state['chat_history'].append(("Bot",chunk.text))
st.subheader("The chat history is")

for role,text in st.session_state['chat_history']:
  st.write(f"{role}:{text}")



















